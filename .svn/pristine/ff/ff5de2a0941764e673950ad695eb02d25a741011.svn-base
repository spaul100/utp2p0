package org.utp.lti2;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.appengine.labs.repackaged.org.json.JSONArray;
import com.google.appengine.labs.repackaged.org.json.JSONException;
import com.google.appengine.labs.repackaged.org.json.JSONObject;
import com.googlecode.objectify.Objectify;
import org.utp.database.BltiKeys;
import org.utp.databaseprocess.BltiKeysProcess;
import org.utp.databaseprocess.ToolDetailsProcess;
import java.util.Calendar;
import java.util.Enumeration;
import org.utp.databaseprocess.ToolCapabilityEnabledProcess;

public class LTIToolProxyRegistration extends HttpServlet {

    DAO dao = new DAO();
    Objectify ofy = dao.ofy();
    Map<String, String> sharedSecrets = new HashMap<String, String>();
    private static final long serialVersionUID = 137L;
    // the following string constants are associated with the ChemVantage Tool Profile and other
    // constants needed to construct a valid Tool Proxy

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        out.print("<!DOCTYPE html>\n"
                + "<html>\n"
                + "<head>\n"
                + ""
                + "<style>\n"
                + "#box1 {\n"
                + "    background-color: lightgrey;\n"
                + "    width: 100%;\n"
                + "    padding: 5px;\n"
                + "    border: 1px solid black;\n"
                + "    margin: 1px;\n"
                + "}\n"
                + "#box2 {\n"
                + "    background-color: lightgrey;\n"
                + "    width: 100%;\n"
                + "    padding: 5px;\n"
                + "    border: 1px solid black;\n"
                + "    margin: 1px;\n"
                + "}\n"
                + "#box3 {\n"
                + "    background-color: lightgrey;\n"
                + "    width: 100%;\n"
                + "    padding: 5px;\n"
                + "    border: 1px solid black;\n"
                + "    margin: 1px;\n"
                + "}\n"
                + "#box4 {\n"
                + "    background-color: lightgrey;\n"
                + "    width: 100%;\n"
                + "    padding: 5px;\n"
                + "    border: 1px solid black;\n"
                + "    margin: 1px;\n"
                + "}\n"
                + "#box5 {\n"
                + "    background-color: lightgrey;\n"
                + "    width: 100%;\n"
                + "    padding: 5px;\n"
                + "    border: 1px solid black;\n"
                + "    margin: 1px;\n"
                + "}\n"
                + "#box6 {\n"
                + "    background-color: lightgrey;\n"
                + "    width: 100%;\n"
                + "    padding: 5px;\n"
                + "    border: 1px solid black;\n"
                + "    margin: 1px;\n"
                + "}\n"
                + "</style>\n"
                + "<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>\n"
                + "<script>\n"
                + "$(document).ready(function(){\n"
                + "    $(\"#b1\").click(function(){\n"
                + "        $(\"#box1\").toggle();\n"
                + "    });\n"
                + "});\n"
                + "$(document).ready(function(){\n"
                + "    $(\"#b2\").click(function(){\n"
                + "        $(\"#box2\").toggle();\n"
                + "    });\n"
                + "});\n"
                + "$(document).ready(function(){\n"
                + "    $(\"#b3\").click(function(){\n"
                + "        $(\"#box3\").toggle();\n"
                + "    });\n"
                + "});\n"
                + "$(document).ready(function(){\n"
                + "    $(\"#b4\").click(function(){\n"
                + "        $(\"#box4\").toggle();\n"
                + "    });\n"
                + "});\n"
                + "$(document).ready(function(){\n"
                + "    $(\"#b5\").click(function(){\n"
                + "        $(\"#box5\").toggle();\n"
                + "    });\n"
                + "});\n"
                + "$(document).ready(function(){\n"
                + "    $(\"#b6\").click(function(){\n"
                + "        $(\"#box6\").toggle();\n"
                + "    });\n"
                + "});\n"
                + "</script>"
                + "</head>\n"
                + "<body>");

        // Extracting the Request URI and check for "register" keyword
        String uri = request.getRequestURI();
        String[] parts = uri.split("/");
        String toolId = parts[parts.length - 1];
        String controller = parts[parts.length - 2];
        if ("register".equals(controller)) {

            /**
             * Get all the parameters of request given by tool consumer to tool
             * provider
             */
            StringBuffer debug = new StringBuffer("Debug:\n");
            String lti_message_type = request.getParameter("lti_message_type");
            String reg_key = request.getParameter("reg_key");
            String reg_password = request.getParameter("reg_password");
            String tc_profile_url = request.getParameter("tc_profile_url");
            String launch_presentation_return_url = request.getParameter("launch_presentation_return_url");

            out.print("<div>\n"
                    + "  <h2><center>LTI Tool Proxy Registration Request</center></h2>\n"
                    + "<h4>Raw POST Parameters  <button id = b1>Toggle</button></h4> "
                    + "  "
                    + "<div id = box1 >"
                    + "lti_message_type : " + lti_message_type
                    + "<br>reg_key : " + reg_key
                    + "<br>reg_password : " + reg_password
                    + "<br>tc_profile_url : " + tc_profile_url
                    + "<br>launch_presentation_return_url : " + launch_presentation_return_url
                    + "</div></div>\n"
            );

            // Test to show all the parameters are being passed by tool consumer properly
            System.out.println(lti_message_type + " " + reg_key + " " + reg_password + " " + tc_profile_url + " " + launch_presentation_return_url);

            //System.out.println(InetAddress.getLocalHost());
            /**
             * Error Handling of all the parameters received
             */
            try {
                if ("basic-lti-launch-request".equals(lti_message_type)) {
                    System.out.println("1");
                    throw new Exception("The correct LTI Launch URL is https://" + request.getServerName() + "/lti/");
                }
                if (!"ToolProxyRegistrationRequest".equals(lti_message_type)) {
                    System.out.println("2");
                    throw new Exception("Invalid message type");
                }
                if (reg_key == null || reg_key.isEmpty()) {
                    System.out.println("3");
                    throw new Exception("Required reg_key parameter is missing.");
                }
                if (reg_password == null || reg_password.isEmpty()) {
                    System.out.println("4");
                    throw new Exception("Required reg_password parameter is missing.");
                }
                if (tc_profile_url == null || tc_profile_url.isEmpty()) {
                    System.out.println("5");
                    throw new Exception("Required tc_profile_url parameter is missing.");
                }
                if (launch_presentation_return_url == null || launch_presentation_return_url.isEmpty()) {
                    System.out.println("6");
                    throw new Exception("Required launch_presentation_return_url parameter is missing.");
                }

                out.print("\n<p>Retrieving tool consumer profile from " + tc_profile_url);

                // Fetching tool consumer profile by issuing an url connection to tc_profile_url
                JSONObject toolConsumerProfile = fetchToolConsumerProfile(tc_profile_url);

                out.print("<br>Retrieved " + toolConsumerProfile.toString().length() + " characters.</p>");

                out.print("<div>\n"
                        + "<h4>Retrieve Tool Consumer <button id =b2>Toggle</button></h4> "
                        + "  "
                        + "<div id = box2 >"
                        + "<pre id=\"json1\"></pre>\n"
                        + "\n"
                        + "<script>\n"
                        + "var data = " + toolConsumerProfile.toString() + "\n"
                        + "\n"
                        + "\n"
                        + "document.getElementById(\"json1\").innerHTML = JSON.stringify(data, undefined, 2);\n"
                        + "</script> "
                        + "</div></div>\n");

                // Test to show tool consumer profile
                System.out.println("Tool Consumer Profile : " + toolConsumerProfile.toString());

                List<String> capability_enabled = getCapabilities(toolId, toolConsumerProfile);

                JSONArray svc = toolConsumerProfile.getJSONArray("service_offered");
                out.print("<br>Found " + svc.length() + " services.");

                for (int i = 0; i < svc.length(); i++) {
                    JSONObject svJson = svc.getJSONObject(i);
                    out.print("<br>Service id : " + svJson.getString("@id"));
                }

                JSONArray tcp = toolConsumerProfile.getJSONArray("capability_offered");
                out.print("<br><br>Found " + tcp.length() + " capabilities.");

                String oauth_secret = BLTIConsumer.generateSecret();

                System.out.println("oauth_secret :" + oauth_secret);

                // Get Base Url
                StringBuffer base_url = request.getRequestURL();

                // base_url : http://10.129.50.17:8080/LTI2p0Implementation/LTIToolProxyRegistration/lti/register
                base_url.delete(base_url.indexOf("lti"), base_url.length()).delete(0, base_url.indexOf("://") + 3);
                System.out.println("Modified Base Url : " + base_url);
                // Launch url contains /lti/launch

                // Construct Tool Proxy 
                JSONObject toolProxy = constructToolProxy(toolId, toolConsumerProfile, tc_profile_url, base_url, oauth_secret, capability_enabled, reg_key);

                System.out.println("Tool Proxy : " + toolProxy.toString());
                System.out.println("Register Url : " + getTCServiceEndpoint("application/vnd.ims.lti.v2.toolproxy+json", toolConsumerProfile));
                debug.append("tool_proxy_formed_ok.");
                System.out.println("Tool Profile : " + toolProxy.get("tool_profile").toString());

                out.print("<div>\n"
                        + "<h4>Registration Request <button id =b3>Toggle</button></h4> "
                        + "  "
                        + "<div id = box3 >"
                        + "<pre id=\"json2\"></pre>\n"
                        + "\n"
                        + "<script>\n"
                        + "var data = " + toolProxy.toString() + "\n"
                        + "\n"
                        + "\n"
                        + "document.getElementById(\"json2\").innerHTML = JSON.stringify(data, undefined, 2);\n"
                        + "</script> "
                        + "</div></div>\n");

                /**
                 *  Tool Provider issues a POST request to the specified endpoint, 
                 * using the reg_password value as the oauth_consumer_secret 
                 * when signing the request. 
                 */
                out.print("<div>\n"
                        + "<h4>Registration Request Headers  <button id = b4>Toggle</button></h4> "
                        + "  "
                        + "<div id = box4 >"
                        + "POST"
                        + "<br>Register Endpoint : " + getTCServiceEndpoint("application/vnd.ims.lti.v2.toolproxy+json", toolConsumerProfile)
                        + "<br>Content Type : application/vnd.ims.lti.v2.toolproxy+json"
                        + "</div></div>\n");

                String reply = new LTIMessage("application/vnd.ims.lti.v2.toolproxy+json", toolProxy.toString(), getTCServiceEndpoint("application/vnd.ims.lti.v2.toolproxy+json", toolConsumerProfile), reg_key, reg_password).send();

                System.out.println("Reply : " + reply.toString());
                debug.append("tc_response_received.");

                Enumeration<String> en = request.getHeaderNames();

                out.print("<div>\n"
                        + "<h4>Registration Response Headers  <button id = b5>Toggle</button></h4> ");
                out.print("<div id = box5 >");
                while (en.hasMoreElements()) {
                    String param = en.nextElement();
                    out.print("<br>" + param + " : " + request.getHeader(param));
                }

                out.print("</div></div>\n");

                out.print("<div>\n"
                        + "<h4>Registration Response <button id =b6>Toggle</button></h4> "
                        + "  "
                        + "<div id = box6 >"
                        + "<pre id=\"json3\"></pre>\n"
                        + "\n"
                        + "<script>\n"
                        + "var data = " + reply + "\n"
                        + "\n"
                        + "\n"
                        + "document.getElementById(\"json3\").innerHTML = JSON.stringify(data, undefined, 2);\n"
                        + "</script> "
                        + "</div></div>\n");
                String tool_proxy_guid = null;
                String tool_proxy_url = null;
                String tool_settings_url = null;
                try {
                    JSONObject replyBody = new JSONObject(reply);
                    debug.append("json_reply_ok.");
                    tool_proxy_guid = replyBody.getString("tool_proxy_guid");
                    tool_proxy_url = replyBody.getString("@id");
                    try {
                        tool_settings_url = replyBody.getString("custom_uri");
                    } catch (Exception e) {

                    }
                    if (tool_proxy_guid.isEmpty() || tool_proxy_url.isEmpty()) {
                        throw new Exception();
                    }
                } catch (Exception e) {
                    throw new Exception("Could not parse response to tool proxy registration request.");
                }

                BltiKeys blti = new BltiKeys();
                blti.setOauthConsumerKey(tool_proxy_guid);
                blti.setSecret(oauth_secret);
                BltiKeysProcess keysProcess = new BltiKeysProcess();
                keysProcess.insert(blti);

                debug.append("LTI_credentials_formed_ok.");
                System.out.println("GUID : " + tool_proxy_guid);
                // all steps completed successfully with no exceptions thrown, so report success back to TC administrator
                out.print("<br><p>Status = success<br>Tool Registered Successfully : <a href=" + launch_presentation_return_url + ">Return to Moodle</a></p>");
//response.sendRedirect(launch_presentation_return_url + "?status=success&tool_proxy_guid=" + tool_proxy_guid);
            } catch (Exception e) {
                e.printStackTrace();
                out.print("<br><p>Sorry, the Tool Proxy Registration failed.<br>" + e.getMessage() + "<br>" + debug.toString() + "<br><a href=" + launch_presentation_return_url + ">Return to Moodle</a></p>");

                // doError(request, response, "Sorry, the Tool Proxy Registration failed.<br>" + e.getMessage() + "<br>" + debug.toString() + "<br>", null, null);
            }
            out.print("</body></html>");
        }
    }

    public void doError(HttpServletRequest request, HttpServletResponse response, String s, String message, Exception e)
            throws java.io.IOException {
        try {
            String return_url = request.getParameter("launch_presentation_return_url");

            return_url += (return_url.indexOf('?') > 1 ? "&lti_msg=" : "?lti_msg=") + URLEncoder.encode(s, "UTF-8");

            //response.sendRedirect(return_url);
            return;
        } catch (Exception e2) {
            // in case no return URL was provided, show the error to the user
            PrintWriter out = response.getWriter();

        }
    }

    JSONObject fetchToolConsumerProfile(String tc_profile_url) throws Exception {
        JSONObject tc_profile = null;
        URL u = new URL(tc_profile_url);
        HttpURLConnection connection = (HttpURLConnection) u.openConnection();
        connection.setRequestProperty("Content-Type", "application/json");
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(u.openStream()));
            StringBuffer res = new StringBuffer();
            String line;
            while ((line = reader.readLine()) != null) {
                res.append(line);
            }
            reader.close();
            tc_profile = new JSONObject(res.toString());
        }
        return tc_profile;
    }

    List<String> getCapabilities(String toolId, JSONObject toolConsumerProfile) throws JSONException {
        // list of capabilities offered by the Tool Consumer
        ToolDetailsProcess capability = new ToolDetailsProcess();
        String json = capability.getToolDetail(Integer.parseInt(toolId));
        JSONObject json_tool = new JSONObject(json);

        JSONArray capabilities_wanted = (JSONArray) json_tool.get("Capability_Wanted");

        List<String> capability_offered = new ArrayList<String>();
        List<String> capability_enabled = new ArrayList<String>();
        JSONArray tcp = toolConsumerProfile.getJSONArray("capability_offered");
        for (int i = 0; i < tcp.length(); i++) {
            capability_offered.add(tcp.getString(i));
        }

        for (int i = 0; i < capabilities_wanted.length(); i++) {
            String s = (String) capabilities_wanted.get(i);
            if (capability_offered.contains(s)) {
                capability_enabled.add(s);
            }
        }

        return capability_enabled;
    }

    JSONObject constructToolProxy(String toolId, JSONObject toolConsumerProfile, String tc_profile_url, StringBuffer base_url, String shared_secret, List<String> capability_enabled, String oauth_consumer_key)
            throws Exception {
        JSONObject toolProxy = new JSONObject();
        toolProxy.put("@context", "http://purl.imsglobal.org/ctx/lti/v2/ToolProxy");
        toolProxy.put("@type", "ToolProxy");
        toolProxy.put("@id", "");
        toolProxy.put("lti_version", toolConsumerProfile.getString("lti_version"));
        toolProxy.put("tool_proxy_guid", oauth_consumer_key);
        toolProxy.put("tool_consumer_profile", tc_profile_url);
        toolProxy.put("tool_profile", getToolProfile(toolId, base_url, capability_enabled));
        toolProxy.put("security_contract", getSecurityContract(toolConsumerProfile, shared_secret, capability_enabled));
        return toolProxy;
    }

    JSONObject getToolProfile(String toolId, StringBuffer base_url, List<String> capability_enabled) throws Exception {  // this is the (mostly static) tool profile for ChemVantage

        Calendar calendar = Calendar.getInstance();

        /*  get a java.util.Date from the calendar instance.
         *  this date will represent the current instant, or "now".
         * 
         */
        java.util.Date now = calendar.getTime();

        //  a java current time (now) instance
        java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(now.getTime());
        ToolDetailsProcess capability = new ToolDetailsProcess();
        String json = capability.getToolDetail(Integer.parseInt(toolId));
        JSONObject json_tool = new JSONObject(json);

        JSONObject toolProfile = new JSONObject()
                .put("lti_version", json_tool.get("lti_version").toString())
                .put("product_instance", json_tool.get("product_instance"))
                .put("base_url_choice", new JSONArray()
                        .put(new JSONObject()
                                .put("selector", "DefaultSelector")
                                .put("default_base_url", "http://" + base_url.toString())
                                .put("secure_base_url", "https://" + base_url.toString())));

        // the following are parameters that are available only at the option of the Tool Consumer (LMS)
        JSONArray parameter = new JSONArray();

        ToolCapabilityEnabledProcess capabilityWanted = new ToolCapabilityEnabledProcess();
        ArrayList<String> capabilities = capabilityWanted.getCapability(Integer.parseInt(toolId));
        ArrayList<String> name = capabilityWanted.getName(Integer.parseInt(toolId));
        ArrayList<String> variable = capabilityWanted.getVarible(Integer.parseInt(toolId));

        for (int i = 0; i < capabilities.size(); i++) {
            System.out.println("capa: " + capabilities.get(i));
            if (capability_enabled.contains(capabilities.get(i))) {
                parameter.put(new JSONObject("{ \"name\":\"" + name.get(i) + "\",\n"
                        + "                \"variable\":\"" + variable.get(i) + "\"}"));
            }
        }

        // construct a generic message object for every basic-lti-launch-request 
        JSONObject msg = new JSONObject();
        msg.put("path", "lti/launch/" + toolId);
        msg.put("message_type", "basic-lti-launch-request");
        JSONArray enabled_capability = new JSONArray();
        for (String cap : capability_enabled) {
            enabled_capability.put(cap);
        }

        msg.put("enabled_capability", enabled_capability);
        JSONArray resource_handler = new JSONArray();
        resource_handler.put(new JSONObject().put("resource_type", json_tool.get("resource_type"))
                .put("description", json_tool.get("description"))
                .put("resource_name", json_tool.get("resource_name"))
                .put("message", new JSONArray()
                        .put(msg
                                .put("parameter", parameter
                                        .put(new JSONObject("{'name':'show'}"))))));

        toolProfile.put("resource_handler", resource_handler);
        return toolProfile;
    }

    JSONObject getSecurityContract(JSONObject toolConsumerProfile, String shared_secret, List<String> capabilities) throws Exception {
        JSONObject security_contract = new JSONObject();
        security_contract.put("shared_secret", shared_secret);

        JSONArray tool = new JSONArray();
        /*  tool.put(new JSONObject()
         .put("@type", "RestServiceProfile")
         .put("service", getTCServiceEndpoint("application/vnd.ims.lti.v2.toolconsumerprofile+json", toolConsumerProfile) )
         .put("format", new JSONArray("['application/vnd.ims.lti.v2.toolconsumerprofile+json']"))
         .put("@id", getTCServiceId("application/vnd.ims.lti.v2.toolconsumerprofile+json", toolConsumerProfile))
         .put("action", new JSONArray("['GET']")));
         tool.put(new JSONObject()
         .put("@type", "RestService")
         .put("service", getTCServiceEndpoint("application/vnd.ims.lti.v2.toolproxy+json", toolConsumerProfile) )
         .put("format", new JSONArray("['application/vnd.ims.lti.v2.toolproxy+json']"))
         .put("@id", getTCServiceId("application/vnd.ims.lti.v2.toolproxy+json", toolConsumerProfile))
         .put("action", new JSONArray("['POST']")));
         /* tool.put(new JSONObject()
         .put("@type", "RestServiceProfile")
         .put("service", getTCServiceEndpoint("application/vnd.ims.lti.v2.toolproxy+json", toolConsumerProfile) + "#tcp:ToolProxy.collection")
         .put("action", new JSONArray("['POST']")));
         if (capabilities.contains("Result.autocreate")) {
         tool.put(new JSONObject()
         .put("@type", "RestService")
         .put("@id", getTCServiceId("application/vnd.ims.lis.v2.result+json", toolConsumerProfile))
         .put("service", getTCServiceEndpoint("application/vnd.ims.lis.v2.result+json", toolConsumerProfile))
         .put("action", new JSONArray("['GET','PUT']"))
         .put("format", "application/vnd.ims.lis.v2.result+json"));
         }*/

        security_contract.put("tool_service", tool);

        return security_contract;

    }

    String getTCServiceEndpoint(String formatString, JSONObject toolConsumerProfile) throws Exception {
        JSONArray service_offered = toolConsumerProfile.getJSONArray("service_offered");
        for (int i = 0; i < service_offered.length(); i++) {
            try {
                JSONObject s = service_offered.getJSONObject(i);
                if (s.has("format")) {
                    JSONArray formats = s.getJSONArray("format");
                    for (int j = 0; j < formats.length(); j++) {
                        if (formats.getString(j).toLowerCase().equals(formatString)) {
                            return s.getString("endpoint");
                        }
                    }
                }
            } catch (Exception e) {
            }
        }
        return null;
    }

    private String getTCServiceId(String formatString, JSONObject toolConsumerProfile) throws JSONException {
        JSONArray service_offered = toolConsumerProfile.getJSONArray("service_offered");
        for (int i = 0; i < service_offered.length(); i++) {
            try {
                JSONObject s = service_offered.getJSONObject(i);
                if (s.has("format")) {
                    JSONArray formats = s.getJSONArray("format");
                    for (int j = 0; j < formats.length(); j++) {
                        if (formats.getString(j).toLowerCase().equals(formatString)) {
                            return s.getString("@id");
                        }
                    }
                }
            } catch (Exception e) {
            }
        }
        return null;
    }

}
