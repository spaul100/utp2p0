/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.utp.databaseprocess;

import com.google.appengine.labs.repackaged.org.json.JSONException;
import com.google.appengine.labs.repackaged.org.json.JSONObject;
import org.utp.database.ToolUrl;
import org.utp.dbhelper.LTI2DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import org.utp.database.RegisteredTool;

/**
 *
 * @author mukul
 */
public class ToolDetailsProcess {

    /**
     * return id
     *
     * @param toolDetail
     * @return
     */
    public ArrayList insert(String toolDetail) throws JSONException {

        ArrayList list = new ArrayList();
        Connection con = null;
        PreparedStatement pstmt = null;
        int id = 0;
        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {
                /*turn off auto commit*/
                con.setAutoCommit(false);

                /*set a save point*/
                /*Insert the value into question_attempt_history*/
                id = nextToolId();
                pstmt = con.prepareStatement("INSERT INTO tool_detail VALUES(?,?,?,?)");

                ToolUrl ins = new ToolUrl();
                JSONObject test = new JSONObject();
                JSONObject json = new JSONObject(toolDetail);

                ins.setId(id);
                ins.setUrl((String) json.get("Tool_Url"));

                ToolUrlProcess inse = new ToolUrlProcess();
                inse.insert(ins);

                pstmt.setInt(1, id);
                pstmt.setString(2, toolDetail);
                pstmt.setString(3, null);
                pstmt.setString(4, null);

                pstmt.executeUpdate();
                System.out.println("f");
                con.commit();

            } catch (SQLException sqle) {

            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
            }

        }
        list.add("http://localhost/utp2p0/lti/register/" + id);
        list.add("http://localhost/utp2p0/lti/launch" + id);

        return list;
    }
    
    public String getRecommendedParameter(int id) {

        String recommended = null;

        /*Initialising object of ResultSet*/
        ResultSet result = null;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                /* SQL statement to to find whether 
                 * this question is attempted by this 
                 * user id or not
                 */
                String sql = "SELECT recommended_parameter FROM  tool_detail where "
                        + "id = ? ";

                /* 
                 * Set the values in the sql statement
                 */
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, id);

                result = pstmt.executeQuery();

                /*calculate the result and store in answer variable*/
                if (result.next()) {
                    recommended = result.getString(1);

                }

            } catch (SQLException sqle) {
                recommended = null;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);
            }

        }
        return recommended;
    }
    public String getOptionalParameter(int id) {

        String optional = null;

        /*Initialising object of ResultSet*/
        ResultSet result = null;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                /* SQL statement to to find whether 
                 * this question is attempted by this 
                 * user id or not
                 */
                String sql = "SELECT optional_parameter FROM  tool_detail where "
                        + "id = ? ";

                /* 
                 * Set the values in the sql statement
                 */
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, id);

                result = pstmt.executeQuery();

                /*calculate the result and store in answer variable*/
                if (result.next()) {
                    optional = result.getString(1);

                }

            } catch (SQLException sqle) {
                optional = null;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);
            }

        }
        return optional;
    }
    
    public void insert(String recommended_parameter, String optional_parameter, int id) throws JSONException {

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {
                /*turn off auto commit*/
                con.setAutoCommit(false);

                /*set a save point*/
                /*Insert the value into question_attempt_history*/
                if (isValid(id)) {
                    
                    pstmt = con.prepareStatement("Update tool_detail set recommended_parameter =? , optional_parameter = ? where id = ?");

                   
                    pstmt.setString(1, recommended_parameter);
                    pstmt.setString(2, optional_parameter);
                    pstmt.setInt(3, id);
                    

                    pstmt.executeUpdate();
                    System.out.println("f");
                    con.commit();
                }
            } catch (SQLException sqle) {

            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
            }

        }
        
    }
    
    public boolean isValid(int id) {

        int ans = 0;

        /*Initialising object of ResultSet*/
        ResultSet result = null;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                /* SQL statement to to find whether 
                 * this question is attempted by this 
                 * user id or not
                 */
                String sql = "SELECT count(*) FROM  tool_detail where "
                        + "id = ? ";

                /* 
                 * Set the values in the sql statement
                 */
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, id);

                result = pstmt.executeQuery();

                /*calculate the result and store in answer variable*/
                if (result.next()) {
                    ans = result.getInt(1);

                }

            } catch (SQLException sqle) {
                ans = -1;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);
            }

        }
        if (ans == 1) {
            return true;
        } else {
            return false;
        }
    }

    /**
     *
     * @return profileId
     */
    public synchronized int nextToolId() {

        ResultSet result = null;
        int id = 0;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                String sql = "SELECT MAX(id) FROM tool_detail";
                pstmt = con.prepareStatement(sql);
                result = pstmt.executeQuery();
                if (result.next()) {
                    id = result.getInt("MAX(id)");
                } else {
                    id = 0;
                }

                id++;

            } catch (SQLException sqle) {
                id = -1;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);

            }
        }
        return id;
    }

    public String getToolDetail(int id) {

        String toolDetail = null;

        /*Initialising object of ResultSet*/
        ResultSet result = null;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                /* SQL statement to to find whether 
                 * this question is attempted by this 
                 * user id or not
                 */
                String sql = "SELECT json_tool FROM  tool_detail where "
                        + "id = ? ";

                /* 
                 * Set the values in the sql statement
                 */
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, id);

                result = pstmt.executeQuery();

                /*calculate the result and store in answer variable*/
                if (result.next()) {
                    toolDetail = result.getString(1);

                }

            } catch (SQLException sqle) {
                toolDetail = null;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);
            }

        }
        return toolDetail;
    }

    public ArrayList getRegisteredTool() throws JSONException {

        ArrayList<RegisteredTool> registeredTool = new ArrayList();

        /*Initialising object of ResultSet*/
        ResultSet result = null;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                /* SQL statement to to find whether 
                 * this question is attempted by this 
                 * user id or not
                 */
                String sql = "SELECT * FROM  tool_detail where id >3";

                /* 
                 * Set the values in the sql statement
                 */
                pstmt = con.prepareStatement(sql);

                result = pstmt.executeQuery();

                /*calculate the result and store in answer variable*/
                while (result.next()) {
                    RegisteredTool details = new RegisteredTool();
                    
                    String json = result.getString(2);
                    JSONObject jsondetail = new JSONObject(json);
                    JSONObject msg1 = jsondetail.getJSONObject("product_instance");
                    JSONObject msg2 = msg1.getJSONObject("product_info");
                    JSONObject msg3 = msg2.getJSONObject("product_name");
                    
                    details.settoolId(result.getInt(1));
                    details.setToolName((String) msg3.get("default_value"));
                    details.setRegistrationUrl("http://localhost/utp2p0/lti/register/" + result.getInt(1));
                    details.setToolProfile(result.getString(2));
                    //registeredTool.add();
                    
                    registeredTool.add(details);
                }

            } catch (SQLException sqle) {
                registeredTool = null;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);
            }

        }
        return registeredTool;
    }

}
