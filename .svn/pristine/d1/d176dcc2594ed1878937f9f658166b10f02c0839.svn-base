/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.utp.databaseprocess;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import org.utp.database.toolCapabilityEnabled;
import org.utp.dbhelper.LTI2DBConnection;

/**
 *
 * @author Sourav Kumar Paul
 */
public class ToolCapabilityEnabledProcess {
 
    
    public void insert( toolCapabilityEnabled toolcapabilityEnabled) {

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {
                /*turn off auto commit*/
                con.setAutoCommit(false);

                /*set a save point*/
                /*Insert the value into question_attempt_history*/
                pstmt = con.prepareStatement("INSERT INTO tool_capability_enabled VALUES(?,?,?,?)");

                pstmt.setInt(1, toolcapabilityEnabled.getid());
                pstmt.setString(2, toolcapabilityEnabled.getcapability());
                pstmt.setString(3, toolcapabilityEnabled.getName());
                pstmt.setString(4, toolcapabilityEnabled.getVariable());
               

                pstmt.executeUpdate();
                System.out.println("f");
                con.commit();

            } catch (SQLException sqle) {

            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
            }

        }
    }
    
    public ArrayList getCapability(int id) {

        ArrayList capability = new ArrayList();

        /*Initialising object of ResultSet*/
        ResultSet result = null;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                /* SQL statement to to find whether 
                 * this question is attempted by this 
                 * user id or not
                 */
                String sql = "SELECT capability FROM  tool_capability_enabled where "
                        + "id = ? ";

                /* 
                 * Set the values in the sql statement
                 */
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, id);

                result = pstmt.executeQuery();

                /*calculate the result and store in answer variable*/
                while (result.next()) {
                        capability.add(result.getString(1));

                }

            } catch (SQLException sqle) {
                capability = null;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);
            }

        }
        return capability;
    }
    
    public ArrayList getName(int id) {

        ArrayList name = new ArrayList();

        /*Initialising object of ResultSet*/
        ResultSet result = null;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                /* SQL statement to to find whether 
                 * this question is attempted by this 
                 * user id or not
                 */
                String sql = "SELECT name FROM  tool_capability_enabled where "
                        + "id = ? ";

                /* 
                 * Set the values in the sql statement
                 */
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, id);

                result = pstmt.executeQuery();

                /*calculate the result and store in answer variable*/
                while (result.next()) {
                        name.add(result.getString(1));

                }

            } catch (SQLException sqle) {
                name = null;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);
            }

        }
        return name;
    }
    
    public ArrayList getVarible(int id) {

        ArrayList variable = new ArrayList();

        /*Initialising object of ResultSet*/
        ResultSet result = null;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                /* SQL statement to to find whether 
                 * this question is attempted by this 
                 * user id or not
                 */
                String sql = "SELECT variable FROM  tool_capability_enabled where "
                        + "id = ? ";

                /* 
                 * Set the values in the sql statement
                 */
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, id);

                result = pstmt.executeQuery();

                /*calculate the result and store in answer variable*/
                while (result.next()) {
                        variable.add(result.getString(1));

                }

            } catch (SQLException sqle) {
                variable = null;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);
            }

        }
        return variable;
    }
}
