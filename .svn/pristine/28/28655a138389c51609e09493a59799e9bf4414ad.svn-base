/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.utp.databaseprocess;

import com.google.appengine.labs.repackaged.org.json.JSONException;
import com.google.appengine.labs.repackaged.org.json.JSONObject;
import org.utp.database.ToolProfile;
import org.utp.dbhelper.LTI2DBConnection;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author mukul
 */
public class ToolProfileProcess {

    /**
     * return id
     * @param toolProfile
     */
    public void insert(ToolProfile toolProfile) {

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {
                /*turn off auto commit*/
                con.setAutoCommit(false);

                /*set a save point*/
                /*Insert the value into question_attempt_history*/
                pstmt = con.prepareStatement("INSERT INTO tool_profile VALUES(?,?,?,?,?)");

                pstmt.setInt(1, toolProfile.getProfileId());
                pstmt.setString(2, toolProfile.getLtiVersion());
                pstmt.setString(3, toolProfile.getJsonProductInstance());
                pstmt.setString(4, toolProfile.getJsonBaseUrl());
                pstmt.setString(5, toolProfile.getJsonResourceHandler());

                pstmt.executeUpdate();
                System.out.println("f");
                con.commit();

            } catch (SQLException sqle) {

            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
            }

        }
    }
    
    /**
     * 
     * @return profileId 
     */
    public synchronized int nextProfileId() {

        ResultSet result = null;
        int profileId = 0;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                String sql = "SELECT MAX(profile_id) FROM tool_profile";
                pstmt = con.prepareStatement(sql);
                result = pstmt.executeQuery();
                if (result.next()) {
                    profileId = result.getInt("MAX(profile_id)");
                } else {
                    profileId = 0;
                }

                profileId++;

            } catch (SQLException sqle) {
                profileId = -1;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);

            }
        }
        return profileId;
    }
    
    public void  ProfileId() throws UnsupportedEncodingException, JSONException {

        ResultSet result = null;
        int profileId = 0;

        Connection con = null;
        PreparedStatement pstmt = null;

        /* Establish connection with the database if not already connected */
        if (LTI2DBConnection.isClosed(con)) {
            con = LTI2DBConnection.getDBConnection();
        }

        if (!LTI2DBConnection.isClosed(con)) {
            try {

                String sql = "SELECT json_tool FROM tool_detail where id=9";
                pstmt = con.prepareStatement(sql);
                result = pstmt.executeQuery();
                if (result.next()) {
                    System.out.println(result.getString(1));
                    JSONObject test = new JSONObject();
                    JSONObject json = new JSONObject(result.getString(1).toString());
                    System.out.println(json.get("Tool_Url"));
                    
                } else {
                    profileId = 0;
                }

                profileId++;

            } catch (SQLException sqle) {
                profileId = -1;
            } finally {
                LTI2DBConnection.closePStatement(pstmt);
                LTI2DBConnection.closeDBConnection(con);
                LTI2DBConnection.closeResultSet(result);

            }
        }
        
    }

}
